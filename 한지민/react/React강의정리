1주차
#JSX 
react에서 jsx 사용 
= JavaScript + XML/HTML

JSX 코드 예시
const element = <h1>Hello, world! </h1>;

JSX의 역할 
자바 스크립트로 변환

JSX 장점
간결한 코드, 가독성, 버그를 발견하기 쉬움, Injection Attacks 방어

JSX 사용법
… XML/HTML
{JavaScript 코드}
…XML/HTML
예시) const element = <h1>안녕, {name}</h1>;

태그의 속성에 값을 넣는 방법 : 큰따옴표 사이에 문자열을 넣거나 중괄호 사이에 자바스크립트 코드 넣기 

#Elements 
리액트 앱을 구성하는 가장 작은 블록들
화면에 보이는 것을 기술
자바스크립트 객체 형태로 존재
React.createElement(
 type,
 [props],
 […children]
)
불변성을 가짐 (elements 생성 후에는 children이나 attributes를 바꿀 수 없다)
렌더링하기
<div id=”root”></div>
const element = <h1>안녕, {name}</h1>;
ReactDom.render(element, document.getElementById(‘root’));

#component
react는 component 기반 
작은 component가 모여 하나의 component, 하나의 웹
props => react component => react element
component 이름은 항상 대문자로 시작 

#props(=property)
element를 구성하는 속성 느낌 
읽기 전용 => 값을 변경할 수 없다 => 새로운 값을 컴포넌트에 전달하여 새로 element를 생성 
모든 리액트 컴포넌트는 props를 직접 바꿀 수 없고, 같은 props에 대해서는 같은 결과를 보여줄 것

props 사용법
function App(props) {
 return (
  <Profile
    name="소플"
    viewCount={1500}
  />
 );
}
profile 컴포넌트의 props에 전달

#state
리액트 component의 상태, 데이터 
렌더링이나 데이터 흐름에 사용되는 값만 state에 포함시켜야 함
변경하고자 할 때 Setstate 사용하여 변경
예시) 
this.state = {
 liked: false
};

#lifecycle
리액트 컴포넌트의 생명주기 

#hook
state 관련 함수와 lifecycle 관련 함수, 최적화 관련 함수가 function component에서 사용할 수 있도록 해주는 것 

규칙 
최상위 레벨에서만 호출해야한다. 
컴포넌트가 렌더링될 때마다 매번 같은 순서로 호출되어야한다. ex)조건문안에 hook 쓰면 조건문의 결과에 따라 호출 순서가 달라지므로 X
리액트 함수 컴포넌트에서만 호출해야한다. 

custom hook (자신이 만드는 것)
custom hook 추출하기(이름 use로 시작) => custom hook 사용하기 

useState()
state를 사용하기 위한 hook
사용법
const [변수명, set함수명] = useState(초기값);

useEffect()
side effect(효과, 영향)를 수행하기 위한 hook
사용법
useEffect(이팩트 함수, 의존성 배열);
effect function이 mount, unmount 시에 단 한 번씩만 실행 됨
=> useEffect(이팩트 함수, [ ]);
의존성 배열을 생략하면 컴포넌트가 업데이트될 때마다 호출 됨
=> useEffect(이팩트 함수);

useMemo()
렌더링이 일어나는 동안 실행 됨 
사용법
const memoizedValue = useMemo(
 ( ) => {
  //연산량이 높은 작업을 수행하여 결과를 반환 
  return computeExpensiveValue(의존성 변수1, 의존성 변수2);
 }
 [의존성 변수1, 의존성 변수2]
);
의존성 배열을 넣지 않을 경우, 매 렌더링마다 함수가 실행 됨 
const memoizedValue = useMemo(
 ( ) => computeExpensiveValue(a, b)
);
의존성 배열이 빈 배열일 경우, 컴포넌트 마운트 시에만 호출 됨
const memoizedValue = useMemo(
 ( ) => {
  return computeExpensiveValue(a, b);
 },
 [ ] 
);

useCallback()
useMemo()와 비슷하지만 값이 아닌 함수를 반환
사용법
const memoizedCallback = useCallback(
 ( ) => {
  doSomething(의존성 변수, 의존성 변수2);
 },
 [의존성 변수1, 의존성 변수2]
);

useRef()
reference(특정 컴포넌트에 접근할 수 있는 객체)를 사용하기 위한 hook
내부의 데이터가 변경되었을 때 별도로 알리지 않는다 => callback ref를 사용하여  확인할 수 있음
사용법 
const refContainer = useRef(초기값);

#handling event
event 사건 ex) 버튼 클릭

DOM Event 
<button onClick="activate()">
 Activate
</button>

리액트의 Event
<button onClick={activate}>
 Activate
</button>

event handler
어떤 사건이 발생하면 어떤 사건을 처리하는 역할 

사용법
1. 함수 안에 함수로 정의 
function handleClick() {
 setIsToggleOn((isToggleOn) => !isToggleOn);
}
2. arrow function 사용하여 정의 
const handleClick = ( ) => {
 setIsToggleOn((isToggleOn) => !isToggleOn);
}